name: bundle

on:
  push:
    branches:
      - master
      - main
    paths-ignore:
      - dist/**
  workflow_dispatch:

permissions:
  actions: read
  contents: write

concurrency:
  group: ${{ github.workflow }}

jobs:
  bundle:
    if: github.repository != 'StageDog/tavern_helper_template'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: JesseTG/rm@v1.0.3
        with:
          path: dist

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: 10

      - run: pnpm install && pnpm format && pnpm build
      - name: Commit changes
        uses: EndBug/add-and-commit@v9.1.3
        with:
          default_author: github_actions
          message: '[bot] bundle'

      # 自动打版本 tag, 从而让 jsdelivr 基于版本号在 12h 内更新缓存而不是用非版本号的 7d 缓存
      - id: autotag
        uses: phish108/autotag-action@v1.1.64
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          with-v: true
      - if: ${{ steps.autotag.outputs.tag != '0.0.0' }}
        run: git push --delete origin ${{ steps.autotag.outputs.tag }}

      # 上传 index.html 到 Cloudflare R2
      - name: Upload index.html to Cloudflare R2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET: gobgame-pic
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
        run: |
          # 检查文件是否存在
          if [ ! -f "dist/哥布林巢穴-简版/index.html" ]; then
            echo "错误: dist/哥布林巢穴-简版/index.html 不存在"
            echo "构建输出目录内容:"
            ls -la dist/ || echo "dist 目录不存在"
            ls -la dist/哥布林巢穴-简版/ || echo "dist/哥布林巢穴-简版/ 目录不存在"
            exit 1
          fi

          # 使用环境变量直接上传，不需要 aws configure
          # 添加必要的元数据以确保 HTML 正确显示
          aws s3 cp dist/哥布林巢穴-简版/index.html "s3://${R2_BUCKET}/index.html" \
            --endpoint-url "https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com" \
            --content-type "text/html" \
            --cache-control "no-cache, must-revalidate"

      # 🔹 新增：清理 Cloudflare Edge 缓存
      - name: Purge Cloudflare Cache
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H "Content-Type: application/json" \
            --data '{"files":["https://kitakamis.online/index.html"]}'
